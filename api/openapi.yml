openapi: 3.1.0
info:
  title: Vsuite Admin Auth API
  version: 1.0.0

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
    Success:
      type: object
      properties:
        ok:
          type: boolean
        message:
          type: string
    Profile:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        jobTitle:
          type: string
        department:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        timeZone:
          type: string
        bio:
          type: string
        linkedinUrl:
          type: string
        githubUrl:
          type: string
    Company:
      type: object
      properties:
        CompanyID:
          type: string
        # Add other company properties based on your data model
    Role:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        permissions:
          type: array
          items:
            type: string

security:
  - bearerAuth: []

paths:
  /api/user/{userId}/profile-picture:
    post:
      security:
        - bearerAuth: []
      summary: Update user profile picture
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Profile picture updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  avatar:
                    type: string
        '400':
          description: No file uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/user/{userId}/profile:
    put:
      security:
        - bearerAuth: []
      summary: Update user profile
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /companies:
    get:
      security:
        - bearerAuth: []
      summary: Get list of companies
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
          description: Number of companies to return
        - in: query
          name: lastDoc
          schema:
            type: string
          description: Last document ID for pagination
      responses:
        '200':
          description: List of companies
          content:
            application/json:
              schema:
                type: object
                properties:
                  companies:
                    type: array
                    items:
                      $ref: '#/components/schemas/Company'
                  lastDoc:
                    type: string
    post:
      security:
        - bearerAuth: []
      summary: Create a new company
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Company'
      responses:
        '201':
          description: Company created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /companies/{id}:
    get:
      security:
        - bearerAuth: []
      summary: Get a single company
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Company details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
        '404':
          description: Company not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      security:
        - bearerAuth: []
      summary: Update a company
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Company'
      responses:
        '200':
          description: Company updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
    delete:
      security:
        - bearerAuth: []
      summary: Delete a company
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Company deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'

  /api/employees:
    get:
      security:
        - bearerAuth: []
      summary: Get list of employees
      parameters:
        - in: query
          name: dept
          schema:
            type: string
          description: Filter by department
        - in: query
          name: status
          schema:
            type: string
          description: Filter by employee status
        - in: query
          name: role
          schema:
            type: string
          description: Filter by role
        - in: query
          name: searchString
          schema:
            type: string
          description: Search by employee name
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Items per page
        - in: query
          name: lastDocId
          schema:
            type: string
          description: Last document ID for pagination
      responses:
        '200':
          description: List of employees
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        email:
                          type: string
                        name:
                          type: string
                        phone:
                          type: string
                          nullable: true
                        dept:
                          type: string
                        role:
                          type: string
                        active:
                          type: boolean
                        notes:
                          type: string
                          nullable: true
                        dateJoined:
                          type: string
                          format: date-time

  /api/employees/{id}:
    get:
      security:
        - bearerAuth: []
      summary: Get single employee details
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Employee ID
      responses:
        '200':
          description: Employee details
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  email:
                    type: string
                  name:
                    type: string
                  phone:
                    type: string
                    nullable: true
                  dept:
                    type: string
                  role:
                    type: string
                  active:
                    type: boolean
                  notes:
                    type: string
                    nullable: true
                  dateJoined:
                    type: string
                    format: date-time
        '404':
          description: Employee not found

    put:
      security:
        - bearerAuth: []
      summary: Update employee details
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Employee ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                dept:
                  type: string
                role:
                  type: string
                phone:
                  type: string
                active:
                  type: boolean
                notes:
                  type: string
              required: [name, email, dept, role]
      responses:
        '200':
          description: Employee updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
        '400':
          description: Missing required fields
        '404':
          description: Employee not found

  /api/employees/{id}/invite:
    post:
      security:
        - bearerAuth: []
      summary: Invite new employee
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Employee ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                phone:
                  type: string
                dept:
                  type: string
                role:
                  type: string
                notes:
                  type: string
              required: [name, email, dept, role]
      responses:
        '200':
          description: Invitation sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  message:
                    type: string
        '400':
          description: Missing required fields or email already in use
        '500':
          description: Failed to send invitation

  /api/employees/{id}/accept-invite:
    get:
      security:
        - bearerAuth: []
      summary: Accept employee invitation
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Employee ID
      responses:
        '302':
          description: Redirect to frontend after successful activation
        '404':
          description: Employee not found

  /api/auth/login:
    post:
      summary: Initial login with email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  example: secret
              required: [email, password]
      responses:
        '200':
          description: Initial login successful, requires 2FA verification if enabled
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
        '401':
          description: Invalid credentials

  /api/auth/2fa-token-verify:
    post:
      summary: Verify 2FA token and complete login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@example.com
                token:
                  type: string
                  example: "123456"
              required: [email]
      responses:
        '200':
          description: Login successful with 2FA verification
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
                  email:
                    type: string
                  first_name:
                    type: string
                  last_name:
                    type: string
                  role:
                    type: object
                  is_admin:
                    type: boolean
                  twoFAEnabled:
                    type: boolean
        '400':
          description: 2FA token required
        '401':
          description: Invalid credentials or invalid 2FA token

  /api/auth/register:
    post:
      summary: Register a new admin user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
                role:
                  type: string
                  description: Role ID from the roles collection
                first_name:
                  type: string
                last_name:
                  type: string
              required: [email, password, role, first_name, last_name]
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "User created successfully"
        '400':
          description: Validation error or user already exists

  /api/auth/refresh-token:
    post:
      summary: Refresh access token using refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  description: Valid refresh token from previous login
              required: [refreshToken]
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
        '400':
          description: Missing refresh token
        '401':
          description: Invalid or expired refresh token

  /api/auth/logout:
    post:
      summary: Logout and revoke refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
              required: [refreshToken]
      responses:
        '200':
          description: Logged out

  /api/auth/2fa/setup:
    post:
      summary: Setup 2FA for user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
              required: [email]
      responses:
        '200':
          description: QR code for 2FA setup
          content:
            application/json:
              schema:
                type: object
                properties:
                  qrCodeUrl:
                    type: string
                    description: Base64 encoded QR code image
        '400':
          description: Email required
        '404':
          description: User not found

  /api/auth/2fa/verify:
    post:
      summary: Verify 2FA token and enable 2FA
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                token:
                  type: string
                  pattern: '^[0-9]{6}$'
                  example: "123456"
              required: [email, token]
      responses:
        '200':
          description: 2FA enabled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "2FA enabled successfully"
        '400':
          description: Invalid token or missing required fields
        '404':
          description: User not found

  /api/roles:
    get:
      security:
        - bearerAuth: []
      summary: Get all roles
      responses:
        '200':
          description: List of roles
          content:
            application/json:
              schema:
                type: object
                properties:
                  roles:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        name:
                          type: string
                        description:
                          type: string
                        permissions:
                          type: array
                          items:
                            type: string

    post:
      security:
        - bearerAuth: []
      summary: Create a new role
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                permissions:
                  type: array
                  items:
                    type: string
              required: [name, description, permissions]
      responses:
        '201':
          description: Role created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string

  /api/roles/{id}:
    put:
      security:
        - bearerAuth: []
      summary: Update an existing role
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Role ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                permissions:
                  type: array
                  items:
                    type: string
              required: [name, description, permissions]
      responses:
        '200':
          description: Role updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
        '400':
          description: Missing required fields

  /api/permissions/matrix:
    get:
      summary: Get available permission codes
      responses:
        '200':
          description: List of permission codes
          content:
            application/json:
              schema:
                type: object
                properties:
                  codes:
                    type: array
                    items:
                      type: string
                    example: [
                      "users.view",
                      "users.edit",
                      "roles.manage",
                      "onboarding.edit",
                      "tickets.edit",
                      "exports.run",
                      "admin.console",
                      "client.portal",
                      "client.tickets",
                      "client.onboarding"
                    ]

  /api/employees/{id}/perms:
    get:
      summary: Get employee permissions
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Employee ID
      responses:
        '200':
          description: Employee permissions
          content:
            application/json:
              schema:
                type: object
                properties:
                  roleId:
                    type: string
                    nullable: true
                  permissions:
                    type: array
                    items:
                      type: string
        '404':
          description: Employee not found

    put:
      summary: Update employee permissions
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Employee ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                roleId:
                  type: string
                permissions:
                  type: array
                  items:
                    type: string
              required: [roleId]
      responses:
        '200':
          description: Permissions updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean